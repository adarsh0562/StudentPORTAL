#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.2
#  in conjunction with Tcl version 8.6
#    May 19, 2020 11:01:44 PM IST  platform: Windows NT

import sys
import sm_homepage
from tkinter.messagebox import *
from tkinter.messagebox import *
import mysql.connector

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sm_dashboard_support
sessionvalue = []
def dashboard_page(*s):
    '''Starting point when module is the main routine.'''
    sessionvalue.append(s[0])
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    sm_dashboard_support.init(root, top)
    #print("session",sessionvalue)
    root.mainloop()

w = None
#print("session2 ->",sessionvalue)
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    sm_dashboard_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
#print("session3 ->",sessionvalue)
class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.font10 = "-family {Rockwell} -size 19 -weight bold -underline "  \
            "1"
        self.font9 = "-family {News701 BT} -size 14 -weight bold"
        self.font13 = "-family {Rockwell} -size 19 -weight bold -underline " \
                      "1"
        self.font14 = "-family {Rockwell} -size 12 -weight bold"
        self.font15 = "-family {Rockwell Condensed} -size 12 -weight bold"
        self.font17 = "-family {Rockwell} -size 9"
        self.font11 = "-family {Rockwell} -size 13 -weight bold"
        self.font18 = "-family {Segoe UI Light} -size 15 -weight bold"

        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("674x557+294+103")
        top.minsize(674, 557)
        top.maxsize(674, 557)
        top.resizable(1, 1)
        top.title("Student Portal")
        top.configure(background="#aeffd7")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.03, rely=0.036, relheight=0.878, relwidth=0.325)

        self.Frame1.configure(relief='sunken')
        self.Frame1.configure(borderwidth="5")
        self.Frame1.configure(relief="sunken")
        self.Frame1.configure(background="#3e56ff")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.TLabel1 = ttk.Label(self.Frame1)
        self.TLabel1.place(relx=0.027, rely=0.022, height=48, width=182)
        self.TLabel1.configure(background="#3e56ff")
        self.TLabel1.configure(foreground="#ffffff")
        self.TLabel1.configure(font="-family {MV Boli} -size 22 -weight bold")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''WELCOME''')

        self.TLabel2 = ttk.Label(self.Frame1)
        self.TLabel2.place(relx=0.046, rely=0.102, height=25, width=198)
        self.TLabel2.configure(background="#3e56ff")
        self.TLabel2.configure(foreground="#ffffff")
        self.TLabel2.configure(font="-family {MV Boli} -size 14 -weight bold")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''To Student Portal''')

        self.homebtn = tk.Button(self.Frame1)
        self.homebtn.place(relx=0.015, rely=0.266, height=45, width=206)
        self.homebtn.configure(takefocus="")
        self.homebtn.configure(text='''DASHBOARD''',command=self.dashboard)
        self.homebtn.configure(activebackground="#ececec")
        self.homebtn.configure(activeforeground="#000000")
        self.homebtn.configure(background="red")
        self.homebtn.configure(borderwidth="1")
        self.homebtn.configure(disabledforeground="#a3a3a3")
        self.homebtn.configure(font=self.font15)
        self.homebtn.configure(foreground="#ffffff")
        self.homebtn.configure(highlightbackground="#d9d9d9")
        self.homebtn.configure(highlightcolor="black")
        self.homebtn.configure(justify='left')

        self.vprofilebtn = tk.Button(self.Frame1)
        self.vprofilebtn.place(relx=0.015, rely=0.368, height=45, width=206)
        self.vprofilebtn.configure(takefocus="")
        self.vprofilebtn.configure(text='''VIEW PROFILE''',command=self.viewprofile)
        self.vprofilebtn.configure(activebackground="#ececec")
        self.vprofilebtn.configure(activeforeground="#000000")
        self.vprofilebtn.configure(background="red")
        self.vprofilebtn.configure(borderwidth="1")
        self.vprofilebtn.configure(disabledforeground="#a3a3a3")
        self.vprofilebtn.configure(font=self.font15)
        self.vprofilebtn.configure(foreground="#ffffff")
        self.vprofilebtn.configure(highlightbackground="#d9d9d9")
        self.vprofilebtn.configure(highlightcolor="black")
        self.vprofilebtn.configure(justify='left')

        self.cpassword = tk.Button(self.Frame1)
        self.cpassword.place(relx=0.015, rely=0.47, height=45, width=206)
        self.cpassword.configure(takefocus="")
        self.cpassword.configure(text='''CHANGE PASSWORD''',command=self.changepass)
        self.cpassword.configure(activebackground="#ececec")
        self.cpassword.configure(activeforeground="#000000")
        self.cpassword.configure(background="red")
        self.cpassword.configure(borderwidth="1")
        self.cpassword.configure(disabledforeground="#a3a3a3")
        self.cpassword.configure(font=self.font15)
        self.cpassword.configure(foreground="#ffffff")
        self.cpassword.configure(highlightbackground="#d9d9d9")
        self.cpassword.configure(highlightcolor="black")
        self.cpassword.configure(justify='left')

        self.aboutbtn = tk.Button(self.Frame1)
        self.aboutbtn.place(relx=0.015, rely=0.573, height=45, width=206)
        self.aboutbtn.configure(takefocus="")
        self.aboutbtn.configure(text='''ABOUT US''',command=self.aboutus)
        self.aboutbtn.configure(activebackground="#ececec")
        self.aboutbtn.configure(activeforeground="#000000")
        self.aboutbtn.configure(background="red")
        self.aboutbtn.configure(borderwidth="1")
        self.aboutbtn.configure(disabledforeground="#a3a3a3")
        self.aboutbtn.configure(font=self.font15)
        self.aboutbtn.configure(foreground="#ffffff")
        self.aboutbtn.configure(highlightbackground="#d9d9d9")
        self.aboutbtn.configure(highlightcolor="black")
        self.aboutbtn.configure(justify='left')

        self.logoutbtn = tk.Button(self.Frame1)
        self.logoutbtn.place(relx=0.015, rely=0.675, height=45, width=206)
        self.logoutbtn.configure(takefocus="")
        self.logoutbtn.configure(text='''LOG OUT''',command=self.logout)
        self.logoutbtn.configure(activebackground="#ececec")
        self.logoutbtn.configure(activeforeground="#000000")
        self.logoutbtn.configure(background="red")
        self.logoutbtn.configure(borderwidth="1")
        self.logoutbtn.configure(disabledforeground="#a3a3a3")
        self.logoutbtn.configure(font=self.font15)
        self.logoutbtn.configure(foreground="#ffffff")
        self.logoutbtn.configure(highlightbackground="#d9d9d9")
        self.logoutbtn.configure(highlightcolor="black")
        self.logoutbtn.configure(justify='left')

        self.dashboard()

    def connection(self):
        try:
            self.con = mysql.connector.connect(host='localhost',user='root',passwd='',database='student_portal')
            self.cursor = self.con.cursor()
        except Exception as e:
            showerror("Connection Error",e)

    def conection_close(self):
        self.con.close()
        self.cursor.close()

    def heading(self,top=None):
        global sessionvalue
        self.session = sessionvalue[0]  # session of user

        self.Frame1_1 = tk.Frame(top)
        self.Frame1_1.place(relx=0.401, rely=0.036, relheight=0.878
                            , relwidth=0.561)
        self.Frame1_1.configure(relief='sunken')
        self.Frame1_1.configure(borderwidth="5")
        self.Frame1_1.configure(relief="sunken")
        self.Frame1_1.configure(background="#3e56ff")
        self.Frame1_1.configure(highlightbackground="#d9d9d9")
        self.Frame1_1.configure(highlightcolor="black")
        self.TLabel2_3 = ttk.Label(self.Frame1_1)
        self.TLabel2_3.place(relx=0.026, rely=0.041, height=36, width=365)
        self.TLabel2_3.configure(background="#3e56ff")
        self.TLabel2_3.configure(foreground="#ffffff")
        self.TLabel2_3.configure(font=self.font9)
        self.TLabel2_3.configure(relief="flat")
        self.TLabel2_3.configure(anchor='w')
        self.TLabel2_3.configure(justify='left')
        try:
            self.connection()
            qry = "select name from studentrecord where rollno=%s"
            self.cursor.execute(qry,(self.session,))
            qry = self.cursor.fetchone()[0]
            self.TLabel2_3.configure(text='''Welcome Mr/Mrs- {}'''.format(qry))
            self.conection_close()
            #print("sessionValue -> ",self.session)
        except Exception as e:
            print("ERROR",e)

    def dashboard(self):
        self.heading()
        self.TLabel3_4 = ttk.Label(self.Frame1_1)
        self.TLabel3_4.place(relx=0.265, rely=0.123, height=34, width=165)
        self.TLabel3_4.configure(background="#3e56ff")
        self.TLabel3_4.configure(foreground="#ffffff")
        self.TLabel3_4.configure(font=self.font10)
        self.TLabel3_4.configure(relief="flat")
        self.TLabel3_4.configure(anchor='w')
        self.TLabel3_4.configure(justify='left')
        self.TLabel3_4.configure(text='''DASHBOARD''')

    def viewprofile(self):
        self.heading()
        self.TLabel3 = ttk.Label(self.Frame1_1)
        self.TLabel3.place(relx=0.200, rely=0.2, height=34, width=310)
        self.TLabel3.configure(background="#3e56ff")
        self.TLabel3.configure(foreground="#ffffff")
        self.TLabel3.configure(font=self.font10)
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''UPDATE PROFILE''')

        self.TLabel4 = ttk.Label(self.Frame1_1)
        self.TLabel4.place(relx=0.053, rely=0.322, height=19, width=136)
        self.TLabel4.configure(background="#3e56ff")
        self.TLabel4.configure(foreground="#ffffff")
        self.TLabel4.configure(font=self.font14)
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''Enter Your name''')

        self.TEntry1 = ttk.Entry(self.Frame1_1)
        self.TEntry1.place(relx=0.56, rely=0.322, relheight=0.044
                           , relwidth=0.389)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.TLabel5 = ttk.Label(self.Frame1_1)
        self.TLabel5.place(relx=0.053, rely=0.387, height=20, width=162)
        self.TLabel5.configure(background="#3e56ff")
        self.TLabel5.configure(foreground="#ffffff")
        self.TLabel5.configure(font=self.font14)
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Enter Roll Number''')

        self.TEntry2 = ttk.Entry(self.Frame1_1)
        self.TEntry2.place(relx=0.56, rely=0.387, relheight=0.044
                           , relwidth=0.389)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        #self.TEntry2_tooltip = ToolTip(self.TEntry2, self.tooltip_font, '''Enter Roll Number''')

        self.TLabel7 = ttk.Label(self.Frame1_1)
        self.TLabel7.place(relx=0.053, rely=0.516, height=30, width=178)
        self.TLabel7.configure(background="#3e56ff")
        self.TLabel7.configure(foreground="#ffffff")
        self.TLabel7.configure(font=self.font14)
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='w')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''Enter Mobile Number''')

        self.TEntry4 = ttk.Entry(self.Frame1_1)
        self.TEntry4.place(relx=0.56, rely=0.516, relheight=0.044
                           , relwidth=0.389)
        self.TEntry4.configure(takefocus="")
        self.TEntry4.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        #self.TEntry4_tooltip = ToolTip(self.TEntry4, self.tooltip_font, '''Enter Mobile Number''')

        self.TLabel9 = ttk.Label(self.Frame1_1)
        self.TLabel9.place(relx=0.053, rely=0.453, height=19, width=115)
        self.TLabel9.configure(background="#3e56ff")
        self.TLabel9.configure(foreground="#ffffff")
        self.TLabel9.configure(font=self.font14)
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(anchor='w')
        self.TLabel9.configure(justify='left')
        self.TLabel9.configure(text='''Select Gender''')

        self.TLabel10 = ttk.Label(self.Frame1_1)
        self.TLabel10.place(relx=0.08, rely=0.589, height=19, width=115)
        self.TLabel10.configure(background="#3e56ff")
        self.TLabel10.configure(foreground="#ffffff")
        self.TLabel10.configure(font=self.font17)
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='w')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Security Question''')

        self.TEntry5 = ttk.Entry(self.Frame1_1)
        self.TEntry5.place(relx=0.56, rely=0.632, relheight=0.044
                           , relwidth=0.389)
        self.TEntry5.configure(takefocus="")
        self.TEntry5.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        #self.TEntry5_tooltip = ToolTip(self.TEntry5, self.tooltip_font, '''Security Question''')

        self.TSeparator1 = ttk.Separator(self.Frame1_1)
        self.TSeparator1.place(relx=0.08, rely=0.589, relwidth=0.827)

        self.TLabel11 = ttk.Label(self.Frame1_1)
        self.TLabel11.place(relx=0.053, rely=0.632, height=19, width=179)
        self.TLabel11.configure(background="#3e56ff")
        self.TLabel11.configure(foreground="#ffffff")
        self.TLabel11.configure(font=self.font14)
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(anchor='w')
        self.TLabel11.configure(justify='left')
        self.TLabel11.configure(text='''Your 1st School name''')

        self.tkvar = tk.StringVar()
        arrow = tk.PhotoImage(file='images/arrow.png').subsample(2,1)
        choices = ['Select Any', 'Male', 'Female', 'Others']
        self.tkvar.set('Select Any')  # set the default option
        self.optionmenu = tk.OptionMenu(self.Frame1_1, self.tkvar, *choices)
        self.optionmenu.place(relx=0.56, rely=0.453, relheight=0.053
                              , relwidth=0.389)
        self.optionmenu.configure(activebackground="#ececec")
        self.optionmenu.configure(activeforeground="#000000")
        self.optionmenu.configure(background="#3e56ff")
        self.optionmenu.configure(borderwidth="1")
        self.optionmenu.configure(disabledforeground="#a3a3a3")
        self.optionmenu.configure(font=self.font15)
        self.optionmenu.configure(foreground="#ffffff")
        self.optionmenu.configure(highlightbackground="#d9d9d9")
        self.optionmenu.configure(highlightcolor="black")
        self.optionmenu.configure(justify='left')
        self.optionmenu.configure(image=arrow)
        self.optionmenu.configure(compound='right', indicatoron=0)
        self.optionmenu.image = arrow

        self.TLabel12 = ttk.Label(self.Frame1_1)
        self.TLabel12.place(relx=0.053, rely=0.731, height=20, width=155)
        self.TLabel12.configure(background="#3e56ff")
        self.TLabel12.configure(foreground="#ffffff")
        self.TLabel12.configure(font=self.font14)
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(anchor='w')
        self.TLabel12.configure(justify='left')
        self.TLabel12.configure(text='''Enter Your Address''')

        self.Scrolledtext1 = tk.Text(self.Frame1_1)
        self.Scrolledtext1.place(relx=0.56, rely=0.693, relheight=0.118
                                 , relwidth=0.387)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")

        self.submit = ttk.Button(self.Frame1_1)
        self.submit.place(relx=0.053, rely=0.842, height=25, width=336)
        self.submit.configure(takefocus="")
        self.submit.configure(text='''UPDATE''',state="disable",command=self.update_record)

        self.edit = ttk.Button(self.Frame1_1)
        self.edit.place(relx=0.053, rely=0.9, height=25, width=336)
        self.edit.configure(takefocus="")
        self.edit.configure(text='''EDIT''',command=self.edit_record)
        self.session_values()

    def session_values(self):
        global sessionvalue
        self.connection()
        self.session = sessionvalue[0]
        qry = "select * from studentrecord where rollno=%s"
        self.cursor.execute(qry,(self.session,))
        record = self.cursor.fetchone()
        value = []
        for x in record:
            value.append(x)
        self.TEntry1.insert(0,value[1])
        self.TEntry2.insert(0, value[2])
        self.tkvar.set(value[4])
        self.TEntry4.insert(0, value[5])
        self.TEntry5.insert(0, value[6])
        self.Scrolledtext1.insert(0.0, value[7])
        self.TEntry1.configure(state="readonly")
        self.TEntry2.configure(state="readonly")
        self.TEntry4.configure(state="readonly")
        self.TEntry5.configure(state="readonly")
        self.optionmenu.configure(state="disable")
        self.Scrolledtext1.configure(state="disable")
        self.conection_close()

    def edit_record(self):
        self.TEntry1.configure(state="normal")
        self.TEntry4.configure(state="normal")
        self.TEntry5.configure(state="normal")
        self.optionmenu.configure(state="normal")
        self.Scrolledtext1.configure(state="normal")
        self.submit.configure(state="normal")

    def update_record(self):
        global sessionvalue
        self.connection()
        self.session = sessionvalue[0]
        name = self.TEntry1.get()
        rollno = self.TEntry2.get()
        mobile = self.TEntry4.get()
        gender = self.tkvar.get()
        sec_ques = self.TEntry5.get()
        address = self.Scrolledtext1.get(0.0, tk.END)
        if all([len(name)!=0,len(mobile)!=0,len(gender)!=0,len(sec_ques)!=0,len(address)!=0,]):
            try:
                qry = " UPDATE studentrecord SET name = %s,mobile = %s,gender = %s,security = %s,address = %s WHERE rollno = %s"
                values = (name,mobile,gender,sec_ques,address,rollno)
                self.cursor.execute(qry,values)
                self.con.commit()
                showinfo("Success", "record updated successfully.")
                if OK:
                    self.viewprofile()
            except Exception as e:
                print("ERROR",e)
            finally:
                self.conection_close()
        else:
            showwarning("Warning","all fields are mandatory to fill")

    def changepass(self):
        self.heading()

        self.TLabel3_4 = ttk.Label(self.Frame1_1)
        self.TLabel3_4.place(relx=0.159, rely=0.143, height=34, width=275)
        self.TLabel3_4.configure(background="#3e56ff")
        self.TLabel3_4.configure(foreground="#ffffff")
        self.TLabel3_4.configure(font=self.font10)
        self.TLabel3_4.configure(relief="flat")
        self.TLabel3_4.configure(anchor='w')
        self.TLabel3_4.configure(justify='left')
        self.TLabel3_4.configure(text='''CHANGE PASSWORD''')

        self.TLabel3 = ttk.Label(self.Frame1_1)
        self.TLabel3.place(relx=0.053, rely=0.315, height=19, width=122)
        self.TLabel3.configure(background="#3e56ff")
        self.TLabel3.configure(foreground="#ffffff")
        self.TLabel3.configure(font=self.font11)
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Old Password''')

        self.Entry1 = ttk.Entry(self.Frame1_1)
        self.Entry1.place(relx=0.529, rely=0.305, relheight=0.063
                          , relwidth=0.413)
        self.Entry1.configure(takefocus="")
        self.Entry1.configure(cursor="ibeam",font=self.font18)
        self.Entry1.configure(show="*")

        self.TLabel4 = ttk.Label(self.Frame1_1)
        self.TLabel4.place(relx=0.053, rely=0.397, height=19, width=135)
        self.TLabel4.configure(background="#3e56ff")
        self.TLabel4.configure(foreground="#ffffff")
        self.TLabel4.configure(font=self.font11)
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''New Password''')

        self.Entry2 = ttk.Entry(self.Frame1_1)
        self.Entry2.place(relx=0.529, rely=0.389, relheight=0.063
                          , relwidth=0.413)
        self.Entry2.configure(takefocus="")
        self.Entry2.configure(cursor="ibeam",font=self.font18)
        self.Entry2.configure(show="*")

        self.TLabel5 = ttk.Label(self.Frame1_1)
        self.TLabel5.place(relx=0.053, rely=0.483, height=19, width=165)
        self.TLabel5.configure(background="#3e56ff")
        self.TLabel5.configure(foreground="#ffffff")
        self.TLabel5.configure(font=self.font11)
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Confirm Password''')

        self.Entry3 = ttk.Entry(self.Frame1_1)
        self.Entry3.place(relx=0.529, rely=0.47, relheight=0.063, relwidth=0.413)

        self.Entry3.configure(takefocus="")
        self.Entry3.configure(cursor="ibeam",font=self.font18)
        self.Entry3.configure(show="*")

        self.savebtn = ttk.Button(self.Frame1_1)
        self.savebtn.place(relx=0.053, rely=0.716, height=35, width=336)
        self.savebtn.configure(takefocus="")
        self.savebtn.configure(text='''UPDATE''',command=self.update_password)

        self.TLabel6 = ttk.Label(self.Frame1_1)
        self.TLabel6.place(relx=0.053, rely=0.552, height=19, width=288)
        self.TLabel6.configure(background="#3e56ff")
        self.TLabel6.configure(foreground="#80ff00")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''Note - Password Must be Follow the Follwing creteria''')

        self.TLabel7 = ttk.Label(self.Frame1_1)
        self.TLabel7.place(relx=0.053, rely=0.593, height=19, width=307)
        self.TLabel7.configure(background="#3e56ff")
        self.TLabel7.configure(foreground="#80ff80")
        self.TLabel7.configure(font="TkDefaultFont")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='w')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''1. At Least One Upper case       2. At Least One Lower Case''')

        self.TLabel8 = ttk.Label(self.Frame1_1)
        self.TLabel8.place(relx=0.053, rely=0.634, height=19, width=299)
        self.TLabel8.configure(background="#3e56ff")
        self.TLabel8.configure(foreground="#80ff00")
        self.TLabel8.configure(font="TkDefaultFont")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor='w')
        self.TLabel8.configure(justify='left')
        self.TLabel8.configure(text='''3. At Least One Special Character     4. At Least One Digit''')

    def update_password(self):
        global sessionvalue
        self.connection()
        self.session = sessionvalue[0]
        old_pass = self.Entry1.get()
        new_pass = self.Entry2.get()
        con_pass = self.Entry3.get()
        if len(old_pass) != 0 and len(new_pass) != 0 and len(con_pass) != 0:
            qry = "select password from studentrecord where rollno=%s"
            self.cursor.execute(qry,(self.session,))
            qry = self.cursor.fetchone()[0]
            if old_pass == qry:
                if new_pass != old_pass:
                    if new_pass == con_pass:
                        try:
                            qry1 = "UPDATE studentrecord SET password = %s WHERE rollno = %s"
                            values = (con_pass, self.session)
                            self.cursor.execute(qry1, values)
                            self.con.commit()
                            showinfo("Success", "password upated successfully.")
                            if OK:
                                self.changepass()
                        except Exception as e:
                            print("ERROR", e)
                        finally:
                            self.conection_close()
                    else:
                        showwarning("Warning","new password and confirm password does not match !!!")
                else:
                    showwarning("Warning", "old password and new password are same !!!")
            else:
                showwarning("Warning", "worng password. please enter valid password !!!")
        else:
            showwarning("Warning", "all fields are mandatory to fill !!!")

    def aboutus(self):
        self.heading()
        self.TLabel3_4 = ttk.Label(self.Frame1_1)
        self.TLabel3_4.place(relx=0.265, rely=0.123, height=34, width=165)
        self.TLabel3_4.configure(background="#3e56ff")
        self.TLabel3_4.configure(foreground="#ffffff")
        self.TLabel3_4.configure(font=self.font10)
        self.TLabel3_4.configure(relief="flat")
        self.TLabel3_4.configure(anchor='w')
        self.TLabel3_4.configure(justify='left')
        self.TLabel3_4.configure(text='''ABOUT US''')

    def logout(self):
        ast = askyesno("Confirm","Are You sure want to Logout !!!!")
        if ast == True:
            a = sm_dashboard_support.destroy_window()
            a = sm_homepage.login_page()
        else:
            pass



#print("session2 ->",sessionvalue)

    #print("session2 ->", sessionvalue)





