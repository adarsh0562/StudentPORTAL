#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.2
#  in conjunction with Tcl version 8.6
#    May 19, 2020 12:22:11 AM IST  platform: Windows NT

import sys
import sm_homepage
import sm_registration
from tkinter.messagebox import *
import mysql.connector

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sm_forgetpass_support

def forget_password():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevelel1 (root)
    sm_forgetpass_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevelel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevelel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevelel1 (w)
    sm_forgetpass_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevelel1():
    global w
    w.destroy()
    w = None

class Toplevelel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {MV Boli} -size 14 -weight bold"
        font11 = "-family {MV Boli} -size 24 -weight bold"
        font13 = "-family {Rockwell} -size 15 -weight bold -underline "  \
            "1"
        font14 = "-family {Rockwell} -size 12 -weight bold"
        font17 = "-family {Rockwell} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("661x518+337+135")
        top.minsize(661, 518)
        top.maxsize(661, 518)
        top.resizable(1, 1)
        top.title("Student Portal")
        top.configure(background="#aeffd7")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.227, rely=0.058, relheight=0.878
                , relwidth=0.567)
        self.Frame1.configure(relief='sunken')
        self.Frame1.configure(borderwidth="5")
        self.Frame1.configure(relief="sunken")
        self.Frame1.configure(background="#3e56ff")

        self.TLabel1 = ttk.Label(self.Frame1)
        self.TLabel1.place(relx=0.053, rely=0.022, height=48, width=149)
        self.TLabel1.configure(background="#3e56ff")
        self.TLabel1.configure(foreground="#ffffff")
        self.TLabel1.configure(font=font11)
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Welcome''')

        self.TLabel2 = ttk.Label(self.Frame1)
        self.TLabel2.place(relx=0.053, rely=0.108, height=28, width=189)
        self.TLabel2.configure(background="#3e56ff")
        self.TLabel2.configure(foreground="#ffffff")
        self.TLabel2.configure(font=font10)
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''To Student Portal''')

        self.TLabel3 = ttk.Label(self.Frame1)
        self.TLabel3.place(relx=0.293, rely=0.198, height=28, width=176)
        self.TLabel3.configure(background="#3e56ff")
        self.TLabel3.configure(foreground="#ffffff")
        self.TLabel3.configure(font=font13)
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Forget Password''')

        self.TLabel5 = ttk.Label(self.Frame1)
        self.TLabel5.place(relx=0.053, rely=0.295, height=18, width=162)
        self.TLabel5.configure(background="#3e56ff")
        self.TLabel5.configure(foreground="#ffffff")
        self.TLabel5.configure(font=font14)
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Enter Roll Number''')

        self.TEntry1 = ttk.Entry(self.Frame1)
        self.TEntry1.place(relx=0.56, rely=0.295, relheight=0.046
                , relwidth=0.389)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry1_tooltip = \
        ToolTip(self.TEntry1, self.tooltip_font, '''Enter Roll Number''')

        self.TLabel6 = ttk.Label(self.Frame1)
        self.TLabel6.place(relx=0.053, rely=0.527, height=28, width=164)
        self.TLabel6.configure(background="#3e56ff")
        self.TLabel6.configure(foreground="#ffffff")
        self.TLabel6.configure(font=font14)
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''Enter New Password''')

        self.TEntry3 = ttk.Entry(self.Frame1)
        self.TEntry3.place(relx=0.56, rely=0.527, relheight=0.046
                , relwidth=0.389)
        self.TEntry3.configure(takefocus="")
        self.TEntry3.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry3_tooltip = \
        ToolTip(self.TEntry3, self.tooltip_font, '''Enter New Password''')

        self.TLabel10 = ttk.Label(self.Frame1)
        self.TLabel10.place(relx=0.08, rely=0.378, height=19, width=115)
        self.TLabel10.configure(background="#3e56ff")
        self.TLabel10.configure(foreground="#ffffff")
        self.TLabel10.configure(font=font17)
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='w')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Security Question''')

        self.TEntry2 = ttk.Entry(self.Frame1)
        self.TEntry2.place(relx=0.56, rely=0.442, relheight=0.046
                , relwidth=0.389)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry2_tooltip = \
        ToolTip(self.TEntry2, self.tooltip_font, '''Security Question''')

        self.TSeparator1 = ttk.Separator(self.Frame1)
        self.TSeparator1.place(relx=0.083, rely=0.38, relwidth=0.813)

        self.TLabel11 = ttk.Label(self.Frame1)
        self.TLabel11.place(relx=0.053, rely=0.442, height=18, width=179)
        self.TLabel11.configure(background="#3e56ff")
        self.TLabel11.configure(foreground="#ffffff")
        self.TLabel11.configure(font=font14)
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(anchor='w')
        self.TLabel11.configure(justify='left')
        self.TLabel11.configure(text='''Your 1st School name''')

        self.submitbtn = ttk.Button(self.Frame1)
        self.submitbtn.place(relx=0.053, rely=0.659, height=25, width=336)
        self.submitbtn.configure(takefocus="")
        self.submitbtn.configure(text='''SUBMIT''',command=self.forget_password)

        self.ifloginbtn = ttk.Button(self.Frame1)
        self.ifloginbtn.place(relx=0.053, rely=0.747, height=25, width=336)
        self.ifloginbtn.configure(takefocus="")
        self.ifloginbtn.configure(text='''IF ALREADY LOGIN''',command=self.loginpage)

        self.regisbtn = ttk.Button(self.Frame1)
        self.regisbtn.place(relx=0.053, rely=0.835, height=25, width=336)
        self.regisbtn.configure(takefocus="")
        self.regisbtn.configure(text='''NEW USER'S''',command=self.open_registration)
        self.connection()
    def connection(self):
        try:
            self.con = mysql.connector.connect(host='localhost',user='root',passwd='',database='student_portal',buffered = True)
            self.cursor = self.con.cursor()
        except Exception as e:
            showerror("Connection Error",e)

    def conection_close(self):
        self.con.close()
        self.cursor.close()

    def loginpage(self):
        #self.conection_close()
        a = sm_forgetpass_support.destroy_window()
        a = sm_homepage.login_page()

    def open_registration(self):
        #self.conection_close()
        a = sm_forgetpass_support.destroy_window()
        a = sm_registration.registration_page()



    def forget_password(self):
        self.connection()
        rollno = self.TEntry1.get()
        sec_ques = self.TEntry2.get()
        newpass = self.TEntry3.get()
        if all([len(rollno)!=0,len(sec_ques)!=0,len(newpass)!=0]):

            sql =''
            try:
                sql = "select rollno from studentrecord where rollno=%s"
                self.cursor.execute(sql,(rollno,))
                sql = self.cursor.fetchone()[0]
            except Exception as e:
                print("Error")

            if sql == rollno:
                qry2 = ''
                try:
                    qry2 = "select security from studentrecord where rollno=%s"
                    self.cursor.execute(qry2,(rollno,))
                    qry2 = self.cursor.fetchone()[0]
                except Exception as e:
                    print("ERROR", e)
                if qry2 == sec_ques:

                    try:
                        qry3 =  """ UPDATE studentrecord
                SET password = %s
                WHERE rollno = %s"""
                        values = (newpass,rollno)
                        self.cursor.execute(qry3,values)
                        self.con.commit()
                        showinfo("Success","password changed successfully.")
                        if OK:
                            self.loginpage()
                    except Exception as e:
                        print("ERROR",e)
                    finally:
                        self.conection_close()

                else:
                    showwarning("Warning", "Security Question Not Match !!")

            else:
                showwarning("Warning","please enter valid rollno !!")
        else:
            showwarning("Warning","Please fill all the text fields")
# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================






