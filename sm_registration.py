#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.2
#  in conjunction with Tcl version 8.6
#    May 18, 2020 11:48:46 PM IST  platform: Windows NT

import sys
import sm_homepage
import sm_forgetpass
import mysql.connector
from tkinter.messagebox import *
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sm_registration_support

def registration_page():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    sm_registration_support.set_Tk_var()
    top = Toplevel1 (root)
    sm_registration_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    sm_registration_support.set_Tk_var()
    top = Toplevel1 (w)
    sm_registration_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {MV Boli} -size 14 -weight bold"
        font11 = "-family {MV Boli} -size 24 -weight bold"
        font13 = "-family {Rockwell} -size 15 -weight bold -underline "  \
            "1"
        font14 = "-family {Rockwell} -size 12 -weight bold"
        font15 = "-family {Rockwell Condensed} -size 12 -weight bold"
        font17 = "-family {Rockwell} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("661x518+337+135")
        top.minsize(661, 518)
        top.maxsize(661, 518)
        #top.resizable(316, 109)
        top.title("Student Portal")
        top.configure(background="#aeffd7")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.197, rely=0.039, relheight=0.917
                , relwidth=0.567)
        self.Frame1.configure(relief='sunken')
        self.Frame1.configure(borderwidth="5")
        self.Frame1.configure(relief="sunken")
        self.Frame1.configure(background="#3e56ff")

        self.TLabel1 = ttk.Label(self.Frame1)
        self.TLabel1.place(relx=0.053, rely=0.021, height=50, width=149)
        self.TLabel1.configure(background="#3e56ff")
        self.TLabel1.configure(foreground="#ffffff")
        self.TLabel1.configure(font=font11)
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Welcome''')

        self.TLabel2 = ttk.Label(self.Frame1)
        self.TLabel2.place(relx=0.053, rely=0.107, height=30, width=189)
        self.TLabel2.configure(background="#3e56ff")
        self.TLabel2.configure(foreground="#ffffff")
        self.TLabel2.configure(font=font10)
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''To Student Portal''')

        self.TLabel3 = ttk.Label(self.Frame1)
        self.TLabel3.place(relx=0.32, rely=0.173, height=29, width=136)
        self.TLabel3.configure(background="#3e56ff")
        self.TLabel3.configure(foreground="#ffffff")
        self.TLabel3.configure(font=font13)
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Registration''')

        self.TLabel4 = ttk.Label(self.Frame1)
        self.TLabel4.place(relx=0.053, rely=0.259, height=19, width=136)
        self.TLabel4.configure(background="#3e56ff")
        self.TLabel4.configure(foreground="#ffffff")
        self.TLabel4.configure(font=font14)
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''Enter Your name''')

        self.TEntry1 = ttk.Entry(self.Frame1)
        self.TEntry1.place(relx=0.56, rely=0.259, relheight=0.044
                , relwidth=0.389)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry1_tooltip = \
        ToolTip(self.TEntry1, self.tooltip_font, '''Enter Your name''')

        self.TLabel5 = ttk.Label(self.Frame1)
        self.TLabel5.place(relx=0.053, rely=0.322, height=20, width=162)
        self.TLabel5.configure(background="#3e56ff")
        self.TLabel5.configure(foreground="#ffffff")
        self.TLabel5.configure(font=font14)
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Enter Roll Number''')

        self.TEntry2 = ttk.Entry(self.Frame1)
        self.TEntry2.place(relx=0.56, rely=0.322, relheight=0.044
                , relwidth=0.389)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry2_tooltip = \
        ToolTip(self.TEntry2, self.tooltip_font, '''Enter Roll Number''')

        self.TLabel6 = ttk.Label(self.Frame1)
        self.TLabel6.place(relx=0.053, rely=0.387, height=19, width=144)
        self.TLabel6.configure(background="#3e56ff")
        self.TLabel6.configure(foreground="#ffffff")
        self.TLabel6.configure(font=font14)
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''Enter Password''')

        self.TEntry3 = ttk.Entry(self.Frame1)
        self.TEntry3.place(relx=0.56, rely=0.387, relheight=0.044
                , relwidth=0.389)
        self.TEntry3.configure(takefocus="")
        self.TEntry3.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry3_tooltip = \
        ToolTip(self.TEntry3, self.tooltip_font, '''Enter Password''')

        self.TLabel7 = ttk.Label(self.Frame1)
        self.TLabel7.place(relx=0.053, rely=0.516, height=30, width=178)
        self.TLabel7.configure(background="#3e56ff")
        self.TLabel7.configure(foreground="#ffffff")
        self.TLabel7.configure(font=font14)
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='w')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''Enter Mobile Number''')

        self.TEntry4 = ttk.Entry(self.Frame1)
        self.TEntry4.place(relx=0.56, rely=0.516, relheight=0.044
                , relwidth=0.389)
        self.TEntry4.configure(takefocus="")
        self.TEntry4.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry4_tooltip = \
        ToolTip(self.TEntry4, self.tooltip_font, '''Enter Mobile Number''')

        self.TLabel9 = ttk.Label(self.Frame1)
        self.TLabel9.place(relx=0.053, rely=0.453, height=19, width=115)
        self.TLabel9.configure(background="#3e56ff")
        self.TLabel9.configure(foreground="#ffffff")
        self.TLabel9.configure(font=font14)
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(anchor='w')
        self.TLabel9.configure(justify='left')
        self.TLabel9.configure(text='''Select Gender''')

        self.TLabel10 = ttk.Label(self.Frame1)
        self.TLabel10.place(relx=0.08, rely=0.589, height=19, width=115)
        self.TLabel10.configure(background="#3e56ff")
        self.TLabel10.configure(foreground="#ffffff")
        self.TLabel10.configure(font=font17)
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='w')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Security Question''')

        self.TEntry5 = ttk.Entry(self.Frame1)
        self.TEntry5.place(relx=0.56, rely=0.632, relheight=0.044
                , relwidth=0.389)
        self.TEntry5.configure(takefocus="")
        self.TEntry5.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry5_tooltip = \
        ToolTip(self.TEntry5, self.tooltip_font, '''Security Question''')

        self.TSeparator1 = ttk.Separator(self.Frame1)
        self.TSeparator1.place(relx=0.08, rely=0.589, relwidth=0.827)

        self.TLabel11 = ttk.Label(self.Frame1)
        self.TLabel11.place(relx=0.053, rely=0.632, height=19, width=179)
        self.TLabel11.configure(background="#3e56ff")
        self.TLabel11.configure(foreground="#ffffff")
        self.TLabel11.configure(font=font14)
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(anchor='w')
        self.TLabel11.configure(justify='left')
        self.TLabel11.configure(text='''Your 1st School name''')

        self.tkvar = tk.StringVar()
        arrow = tk.PhotoImage(file='images/arrow.png')
        choices = ['Select Any','Male', 'Female', 'Others']
        self.tkvar.set('Select Any')  # set the default option
        self.optionmenu = tk.OptionMenu(self.Frame1, self.tkvar, *choices)
        self.optionmenu.place(relx=0.56, rely=0.453, relheight=0.053
                , relwidth=0.389)
        self.optionmenu.configure(activebackground="#ececec")
        self.optionmenu.configure(activeforeground="#000000")
        self.optionmenu.configure(background="#3e56ff")
        self.optionmenu.configure(borderwidth="1")
        self.optionmenu.configure(disabledforeground="#a3a3a3")
        self.optionmenu.configure(font=font15)
        self.optionmenu.configure(foreground="#ffffff")
        self.optionmenu.configure(highlightbackground="#d9d9d9")
        self.optionmenu.configure(highlightcolor="black")
        self.optionmenu.configure(justify='left')
        self.optionmenu.configure(image=arrow)
        self.optionmenu.configure(compound='right', indicatoron=0)
        self.optionmenu.image=arrow

        self.TLabel12 = ttk.Label(self.Frame1)
        self.TLabel12.place(relx=0.053, rely=0.731, height=20, width=155)
        self.TLabel12.configure(background="#3e56ff")
        self.TLabel12.configure(foreground="#ffffff")
        self.TLabel12.configure(font=font14)
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(anchor='w')
        self.TLabel12.configure(justify='left')
        self.TLabel12.configure(text='''Enter Your Address''')

        self.Scrolledtext1 = ScrolledText(self.Frame1)
        self.Scrolledtext1.place(relx=0.56, rely=0.693, relheight=0.118
                , relwidth=0.387)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")

        self.submit = ttk.Button(self.Frame1)
        self.submit.place(relx=0.053, rely=0.842, height=25, width=336)
        self.submit.configure(takefocus="")
        self.submit.configure(text='''SUBMIT''',command=self.registration_submit)

        self.already = ttk.Button(self.Frame1)
        self.already.place(relx=0.053, rely=0.905, height=25, width=336)
        self.already.configure(takefocus="")
        self.already.configure(text='''IF ALREADY LOGIN''',command=self.loginpage)

    def connection(self):
        try:
            self.con = mysql.connector.connect(host='localhost',user='root',passwd='',database='student_portal')
            self.cursor = self.con.cursor()
        except Exception as e:
            showerror("Connection Error",e)

    def conection_close(self):
        self.con.close()
        self.cursor.close()

    def registration_submit(self):
        #self.conection_close()
        self.connection()
        name = self.TEntry1.get()
        rollno = self.TEntry2.get()
        password = self.TEntry3.get()
        gender = self.tkvar.get()
        mobile = self.TEntry4.get()
        sec_ques = self.TEntry5.get()
        address = self.Scrolledtext1.get(0.1,tk.END)

        sql = "insert into studentrecord(name,rollno,password,gender,mobile,security,address)" \
              " values ('%s','%s','%s','%s','%s','%s','%s')"%(name,rollno,password,gender,mobile,sec_ques,address)
        self.cursor.execute(sql)
        self.con.commit()
        if self.cursor.rowcount > 0:
            self.conection_close()
            showinfo("Success","Your User Name is - {}".format(rollno))
        else:
            showerror("Data Error","Please try again")

    def loginpage(self):

        a = sm_registration_support.destroy_window()
        a = sm_homepage.login_page()
# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')







